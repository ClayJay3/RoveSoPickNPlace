@inject AccountsService _AccountsService
@inject NavigationManager _NavigationManager
@inject IJSRuntime _JSRuntime
@inject ProtectedLocalStorage _ProtectedLocalStorage
@inject ProtectedSessionStorage _ProtectedSessionStorage

<RadzenStack Gap="0" class="rz-my-12 rz-mx-auto rz-border-radius-6 rz-shadow-10" Style="width: 100%; max-width: 600px; overflow: hidden;">
    <RadzenCard class="rz-shadow-0 rz-border-radius-0 rz-background-color-info rz-p-12" style="text-align: center;">
        <RadzenText TextStyle="TextStyle.DisplayH3" TagName="TagName.H2" class="rz-color-white rz-mb-0">Kroft Login</RadzenText>
    </RadzenCard>
    <RadzenCard class="rz-shadow-0">
        <RadzenTemplateForm Data=@("LoginWithDefaultValues")>
            <RadzenLogin AllowRegister="true" AllowResetPassword="true" FormFieldVariant="Variant.Filled"
                        AllowRememberMe="false"
                        Login=@(args => OnLogin(args, "Login with default values"))
                        ResetPassword=@(args => OnResetPassword(args, "Login with default values"))
                        Register=@(args => OnRegister("Login with default values")) />
        </RadzenTemplateForm>
    </RadzenCard>
    @if (loginFailed)
    {
        <RadzenAlert AlertStyle="AlertStyle.Danger" ShowIcon="true" AllowClose="false" Variant="Variant.Flat" Shade="Shade.Lighter">
            Username or password is incorrect.
        </RadzenAlert>
    }
</RadzenStack>

@code {
    // Create private variables.
    private bool loginFailed = false;

    private async void OnLogin(LoginArgs args, string name)
    {
        // Create a login input object from the form data.
        var loginInput = new LoginCreds
        {
            Username = args.Username,
            Password = args.Password,
        };

        string? token = await _AccountsService.Authenticate(loginInput);
        if (token != null)
        {
            loginFailed = false;
            
            // Create an AuthData object to hold both the token and the username.
            var authData = new AuthData
            {
                Token = token,
                Username = args.Username
            };

            // In the future, we can use _ProtectedLocalStorage or _ProtectedSessionStorage based on a "remember me"
            // Save the authData persistently (encrypted)
            await _ProtectedLocalStorage.SetAsync("authData", authData);

            // Redirect to the home page or dashboard.
            _NavigationManager.NavigateTo("/");
        }
        else
        {
            loginFailed = true;
            await InvokeAsync(StateHasChanged);
        }
    }

    private async void OnRegister(string name)
    {
    }

    private async void OnResetPassword(string value, string name)
    {
    }
}