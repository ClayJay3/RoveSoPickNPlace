@inherits LayoutComponentBase
@inject ThemeService _ThemeService
@inject CookieThemeService _CookieThemeService
@inject AccountsService _AccountsService
@inject NavigationManager NavigationManager
@inject IToastService _ToastsService
@inject ProtectedLocalStorage _ProtectedLocalStorage
@inject ProtectedSessionStorage _ProtectedSessionStorage

<PageTitle>RoveSoPickNPlace</PageTitle>

<RadzenComponents />
<RadzenLayout Style="grid-template-areas: 'rz-sidebar rz-header' 'rz-sidebar rz-body'">
     @if(_AccountsService.IsAuthenticated)
     {
        <RadzenHeader>
            <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.SpaceBetween" Style="width: 100%;">
                <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Gap="0">
                    <RadzenSidebarToggle Click="@ToggleSidebar" />
                    <RadzenLabel Text="Header" />
                </RadzenStack>
                <RadzenDropDown Name="ThemeDropDown" TValue="string" Value="@_ThemeService.Theme" ValueChanged="@ChangeTheme" Data="@Themes.Free" TextProperty=@nameof(Theme.Text) ValueProperty=@nameof(Theme.Value) />
                <RadzenProfileMenu Click="@MenuClick">
                    <Template>
                        <RadzenGravatar Email="@(_AccountsService.CurrentUserProfile?.Email ?? "default@example.com")">
                        </RadzenGravatar>
                    </Template>
                    <ChildContent>
                        <RadzenProfileMenuItem Text="Sign Out" Icon="account_circle"></RadzenProfileMenuItem>
                    </ChildContent>
                </RadzenProfileMenu>
            </RadzenStack>
            <BlazoredToasts ShowProgressBar="true" Timeout="5" />
        </RadzenHeader>
        <RadzenSidebar @bind-Expanded="@sidebarExpanded">
            <RadzenPanelMenu>
                <RadzenPanelMenuItem Text="Home" Icon="home" Path="/"/>
            </RadzenPanelMenu>
            <div class="rz-p-4">
                Sidebar
            </div>
        </RadzenSidebar>
     }
    <RadzenBody>
        <div class="rz-p-4">
            @if (hasRestoredAuth)
            {
                @if (!_AccountsService.IsAuthenticated)
                {
                    <Login />
                }
                else
                {
                    @Body
                }
            }
        </div>
    </RadzenBody>
</RadzenLayout>

<div id="blazor-error-ui">
    An unhandled error has occurred.
    <a href="" class="reload">Reload</a>
    <a class="dismiss">🗙</a>
</div>

@code {
    // Declare a variable to control the sidebar state.
    private bool sidebarExpanded = true;
    private bool hasRestoredAuth = false;

    
    protected override void OnInitialized()
    {
        _ToastsService.ShowInfo("TEST");
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && !hasRestoredAuth)
        {
            // Now it's safe to perform JS interop calls.
            await _AccountsService.CheckAndRestoreAuthentication();
            hasRestoredAuth = true;
            StateHasChanged();
        }
    }
    private void ToggleSidebar()
    {
        // Toggle the sidebar state.
        sidebarExpanded = !sidebarExpanded;
    }

    void ChangeTheme(string value)
    {
        _ThemeService.SetTheme(value);
        _ThemeService.SetWcag(true);
    }

    private async Task MenuClick(RadzenProfileMenuItem item)
    {
        if (item.Text == "Sign Out")
        {
            // Clear the stored authentication data.
            await _ProtectedLocalStorage.DeleteAsync("authData");
            await _ProtectedSessionStorage.DeleteAsync("authData");

            // Clear the AccountsService token and update its state.
            _AccountsService.Logout();
        }
    }
}
