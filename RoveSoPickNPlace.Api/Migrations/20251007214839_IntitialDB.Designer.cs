// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RoveSoPickNPlace.Api.Entities;

#nullable disable

namespace RoveSoPickNPlace.Api.Migrations
{
    [DbContext(typeof(RoveSoPickNPlaceDatabase))]
    [Migration("20251007214839_IntitialDB")]
    partial class IntitialDB
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.2");

            modelBuilder.Entity("RoveSoPickNPlace.Models.Entities.BOMEntry", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasColumnName("ID");

                    b.Property<int?>("AssignedFeederSlot")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Designator")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("JobID")
                        .HasColumnType("TEXT");

                    b.Property<string>("PartNumber")
                        .HasColumnType("TEXT");

                    b.Property<int?>("Quantity")
                        .HasColumnType("INTEGER");

                    b.HasKey("ID");

                    b.HasIndex("JobID");

                    b.ToTable("BomEntries");
                });

            modelBuilder.Entity("RoveSoPickNPlace.Models.Entities.CameraFeed", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasColumnName("ID");

                    b.Property<int?>("Fps")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("LastFrameAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Resolution")
                        .HasColumnType("TEXT");

                    b.Property<int?>("Status")
                        .HasColumnType("INTEGER");

                    b.Property<string>("StreamEndpoint")
                        .HasColumnType("TEXT");

                    b.Property<int?>("Type")
                        .HasColumnType("INTEGER");

                    b.HasKey("ID");

                    b.ToTable("CameraFeeds");
                });

            modelBuilder.Entity("RoveSoPickNPlace.Models.Entities.ComponentDefinition", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasColumnName("ID");

                    b.Property<double?>("HeightMm")
                        .HasColumnType("REAL");

                    b.Property<double?>("LengthMm")
                        .HasColumnType("REAL");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Notes")
                        .HasColumnType("TEXT");

                    b.Property<string>("PackageType")
                        .HasColumnType("TEXT");

                    b.Property<double?>("PickupHeightOffsetMm")
                        .HasColumnType("REAL");

                    b.Property<double?>("RotationOffsetDegrees")
                        .HasColumnType("REAL");

                    b.Property<string>("TapeOrientationCode")
                        .HasColumnType("TEXT");

                    b.Property<double?>("TapePitchMm")
                        .HasColumnType("REAL");

                    b.Property<bool>("VisionAlignmentRequired")
                        .HasColumnType("INTEGER");

                    b.Property<double?>("WidthMm")
                        .HasColumnType("REAL");

                    b.HasKey("ID");

                    b.ToTable("ComponentDefinitions");
                });

            modelBuilder.Entity("RoveSoPickNPlace.Models.Entities.ComponentPlacementRecord", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasColumnName("ID");

                    b.Property<Guid?>("ComponentDefinitionID")
                        .HasColumnType("TEXT");

                    b.Property<bool?>("CorrectionApplied")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("FeederSlot")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("JobID")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("PlacedAt")
                        .HasColumnType("TEXT");

                    b.Property<double?>("PlacedRotation")
                        .HasColumnType("REAL");

                    b.Property<double?>("PlacedX")
                        .HasColumnType("REAL");

                    b.Property<double?>("PlacedY")
                        .HasColumnType("REAL");

                    b.Property<bool?>("Success")
                        .HasColumnType("INTEGER");

                    b.Property<double?>("TargetRotation")
                        .HasColumnType("REAL");

                    b.Property<double?>("TargetX")
                        .HasColumnType("REAL");

                    b.Property<double?>("TargetY")
                        .HasColumnType("REAL");

                    b.HasKey("ID");

                    b.HasIndex("ComponentDefinitionID");

                    b.HasIndex("JobID");

                    b.ToTable("ComponentPlacements");
                });

            modelBuilder.Entity("RoveSoPickNPlace.Models.Entities.Feeder", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasColumnName("ID");

                    b.Property<Guid>("ComponentDefinitionId")
                        .HasColumnType("TEXT");

                    b.Property<bool?>("IsLoaded")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("LastLoadedAt")
                        .HasColumnType("TEXT");

                    b.Property<int?>("RemainingCount")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("SlotNumber")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("Status")
                        .HasColumnType("INTEGER");

                    b.HasKey("ID");

                    b.HasIndex("ComponentDefinitionId");

                    b.ToTable("Feeders");
                });

            modelBuilder.Entity("RoveSoPickNPlace.Models.Entities.InspectionResult", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasColumnName("ID");

                    b.Property<Guid?>("ComponentPlacementRecordID")
                        .HasColumnType("TEXT");

                    b.Property<string>("ImagePath")
                        .HasColumnType("TEXT");

                    b.Property<bool?>("IsCorrect")
                        .HasColumnType("INTEGER");

                    b.Property<double?>("OffsetX")
                        .HasColumnType("REAL");

                    b.Property<double?>("OffsetY")
                        .HasColumnType("REAL");

                    b.Property<double?>("RotationError")
                        .HasColumnType("REAL");

                    b.Property<DateTime?>("Timestamp")
                        .HasColumnType("TEXT");

                    b.HasKey("ID");

                    b.HasIndex("ComponentPlacementRecordID")
                        .IsUnique();

                    b.ToTable("InspectionResults");
                });

            modelBuilder.Entity("RoveSoPickNPlace.Models.Entities.Job", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasColumnName("ID");

                    b.Property<DateTime?>("CompletedAt")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("CplFileId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<TimeSpan?>("EstimatedDuration")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Owner")
                        .HasColumnType("TEXT");

                    b.Property<double?>("Progress")
                        .HasColumnType("REAL");

                    b.Property<DateTime?>("StartedAt")
                        .HasColumnType("TEXT");

                    b.Property<int?>("Status")
                        .HasColumnType("INTEGER");

                    b.HasKey("ID");

                    b.HasIndex("CplFileId");

                    b.ToTable("Jobs");
                });

            modelBuilder.Entity("RoveSoPickNPlace.Models.Entities.LogEntry", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasColumnName("ID");

                    b.Property<Guid?>("JobID")
                        .HasColumnType("TEXT");

                    b.Property<int?>("Level")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Message")
                        .HasColumnType("TEXT");

                    b.Property<string>("Source")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("TEXT");

                    b.HasKey("ID");

                    b.HasIndex("JobID");

                    b.ToTable("LogEntries");
                });

            modelBuilder.Entity("RoveSoPickNPlace.Models.Entities.MachineState", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasColumnName("ID");

                    b.Property<Guid?>("ActiveJobID")
                        .HasColumnType("TEXT");

                    b.Property<double?>("CpuTemperatureC")
                        .HasColumnType("REAL");

                    b.Property<double?>("CpuUsagePercent")
                        .HasColumnType("REAL");

                    b.Property<bool?>("GrblConnected")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("LastHeartbeat")
                        .HasColumnType("TEXT");

                    b.Property<double?>("MemoryUsagePercent")
                        .HasColumnType("REAL");

                    b.Property<bool?>("RaspberryPiConnected")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("Status")
                        .HasColumnType("INTEGER");

                    b.HasKey("ID");

                    b.HasIndex("ActiveJobID");

                    b.ToTable("MachineState");
                });

            modelBuilder.Entity("RoveSoPickNPlace.Models.Entities.ManualControlCommand", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasColumnName("ID");

                    b.Property<bool?>("Executed")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("ExecutedAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("IssuedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("IssuedBy")
                        .HasColumnType("TEXT");

                    b.Property<string>("ParametersJson")
                        .HasColumnType("TEXT");

                    b.Property<int?>("Type")
                        .HasColumnType("INTEGER");

                    b.HasKey("ID");

                    b.ToTable("ManualControlCommand");
                });

            modelBuilder.Entity("RoveSoPickNPlace.Models.Entities.Notification", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasColumnName("ID");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<int?>("Level")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Message")
                        .HasColumnType("TEXT");

                    b.Property<bool?>("Resolved")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("ResolvedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("ID");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("RoveSoPickNPlace.Models.Entities.UploadedFile", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasColumnName("ID");

                    b.Property<string>("BoardName")
                        .HasColumnType("TEXT");

                    b.Property<string>("ContentType")
                        .HasColumnType("TEXT");

                    b.Property<string>("FileName")
                        .HasColumnType("TEXT");

                    b.Property<bool?>("Parsed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ParsingErrors")
                        .HasColumnType("TEXT");

                    b.Property<long?>("SizeBytes")
                        .HasColumnType("INTEGER");

                    b.Property<string>("StoragePath")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("UploadedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("ID");

                    b.ToTable("UploadedFiles");
                });

            modelBuilder.Entity("RoveSoPickNPlace.Models.Entities.VisionCalibration", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasColumnName("ID");

                    b.Property<DateTime?>("CalibratedAt")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("CameraID")
                        .HasColumnType("TEXT");

                    b.Property<string>("DistortionJson")
                        .HasColumnType("TEXT");

                    b.Property<string>("IntrinsicsJson")
                        .HasColumnType("TEXT");

                    b.HasKey("ID");

                    b.HasIndex("CameraID");

                    b.ToTable("VisionCalibrations");
                });

            modelBuilder.Entity("RoveSoPickNPlace.Models.Entities.BOMEntry", b =>
                {
                    b.HasOne("RoveSoPickNPlace.Models.Entities.Job", "Job")
                        .WithMany("BomEntries")
                        .HasForeignKey("JobID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Job");
                });

            modelBuilder.Entity("RoveSoPickNPlace.Models.Entities.ComponentPlacementRecord", b =>
                {
                    b.HasOne("RoveSoPickNPlace.Models.Entities.ComponentDefinition", "ComponentDefinition")
                        .WithMany("PlacementRecords")
                        .HasForeignKey("ComponentDefinitionID")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("RoveSoPickNPlace.Models.Entities.Job", "Job")
                        .WithMany("Placements")
                        .HasForeignKey("JobID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ComponentDefinition");

                    b.Navigation("Job");
                });

            modelBuilder.Entity("RoveSoPickNPlace.Models.Entities.Feeder", b =>
                {
                    b.HasOne("RoveSoPickNPlace.Models.Entities.ComponentDefinition", "ComponentDefinition")
                        .WithMany()
                        .HasForeignKey("ComponentDefinitionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.OwnsOne("RoveSoPickNPlace.Models.Entities.Position", "PickupPosition", b1 =>
                        {
                            b1.Property<Guid>("FeederID")
                                .HasColumnType("TEXT");

                            b1.Property<double?>("Rotation")
                                .HasColumnType("REAL")
                                .HasColumnName("PickupPosition_Rotation");

                            b1.Property<double?>("X")
                                .HasColumnType("REAL")
                                .HasColumnName("PickupPosition_X");

                            b1.Property<double?>("Y")
                                .HasColumnType("REAL")
                                .HasColumnName("PickupPosition_Y");

                            b1.Property<double?>("Z")
                                .HasColumnType("REAL")
                                .HasColumnName("PickupPosition_Z");

                            b1.HasKey("FeederID");

                            b1.ToTable("Feeders");

                            b1.WithOwner()
                                .HasForeignKey("FeederID");
                        });

                    b.Navigation("ComponentDefinition");

                    b.Navigation("PickupPosition");
                });

            modelBuilder.Entity("RoveSoPickNPlace.Models.Entities.InspectionResult", b =>
                {
                    b.HasOne("RoveSoPickNPlace.Models.Entities.ComponentPlacementRecord", "ComponentPlacementRecord")
                        .WithOne("InspectionResult")
                        .HasForeignKey("RoveSoPickNPlace.Models.Entities.InspectionResult", "ComponentPlacementRecordID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("ComponentPlacementRecord");
                });

            modelBuilder.Entity("RoveSoPickNPlace.Models.Entities.Job", b =>
                {
                    b.HasOne("RoveSoPickNPlace.Models.Entities.UploadedFile", "CplFile")
                        .WithMany("JobsReferencing")
                        .HasForeignKey("CplFileId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("CplFile");
                });

            modelBuilder.Entity("RoveSoPickNPlace.Models.Entities.LogEntry", b =>
                {
                    b.HasOne("RoveSoPickNPlace.Models.Entities.Job", "Job")
                        .WithMany("LogEntries")
                        .HasForeignKey("JobID")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Job");
                });

            modelBuilder.Entity("RoveSoPickNPlace.Models.Entities.MachineState", b =>
                {
                    b.HasOne("RoveSoPickNPlace.Models.Entities.Job", "ActiveJob")
                        .WithMany()
                        .HasForeignKey("ActiveJobID")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.OwnsOne("RoveSoPickNPlace.Models.Entities.Position", "CurrentPosition", b1 =>
                        {
                            b1.Property<Guid>("MachineStateID")
                                .HasColumnType("TEXT");

                            b1.Property<double?>("Rotation")
                                .HasColumnType("REAL")
                                .HasColumnName("CurrentPosition_Rotation");

                            b1.Property<double?>("X")
                                .HasColumnType("REAL")
                                .HasColumnName("CurrentPosition_X");

                            b1.Property<double?>("Y")
                                .HasColumnType("REAL")
                                .HasColumnName("CurrentPosition_Y");

                            b1.Property<double?>("Z")
                                .HasColumnType("REAL")
                                .HasColumnName("CurrentPosition_Z");

                            b1.HasKey("MachineStateID");

                            b1.ToTable("MachineState");

                            b1.WithOwner()
                                .HasForeignKey("MachineStateID");
                        });

                    b.Navigation("ActiveJob");

                    b.Navigation("CurrentPosition");
                });

            modelBuilder.Entity("RoveSoPickNPlace.Models.Entities.VisionCalibration", b =>
                {
                    b.HasOne("RoveSoPickNPlace.Models.Entities.CameraFeed", "Camera")
                        .WithMany("Calibrations")
                        .HasForeignKey("CameraID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Camera");
                });

            modelBuilder.Entity("RoveSoPickNPlace.Models.Entities.CameraFeed", b =>
                {
                    b.Navigation("Calibrations");
                });

            modelBuilder.Entity("RoveSoPickNPlace.Models.Entities.ComponentDefinition", b =>
                {
                    b.Navigation("PlacementRecords");
                });

            modelBuilder.Entity("RoveSoPickNPlace.Models.Entities.ComponentPlacementRecord", b =>
                {
                    b.Navigation("InspectionResult");
                });

            modelBuilder.Entity("RoveSoPickNPlace.Models.Entities.Job", b =>
                {
                    b.Navigation("BomEntries");

                    b.Navigation("LogEntries");

                    b.Navigation("Placements");
                });

            modelBuilder.Entity("RoveSoPickNPlace.Models.Entities.UploadedFile", b =>
                {
                    b.Navigation("JobsReferencing");
                });
#pragma warning restore 612, 618
        }
    }
}
